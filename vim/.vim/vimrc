" Vim/Neovim config file.

" Reload vimrc:
"   :so %
"   :so $MYVIMRC

if !has('nvim')
  " Load vim defaults.
  " :h skip_defaults_vim
  unlet! skip_defaults_vim
  source $VIMRUNTIME/defaults.vim
endif


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Functions
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
function! SourceIfExists(path)
  let local_vimrc = fnamemodify(expand('<sfile>'), ':p:h').'/'.a:path
  if filereadable(local_vimrc)
    execute 'source' local_vimrc
  endif
endfunction


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Plugins
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatically install vim-plug and the plugins.
" https://github.com/junegunn/vim-plug/wiki/tips#automatic-installation
let data_dir = has('nvim') ? stdpath('data') . '/site' : '~/.vim'
if empty(glob(data_dir . '/autoload/plug.vim'))
  silent execute '!curl -fLo '.data_dir.'/autoload/plug.vim --create-dirs  https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim'
  autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif


" Function used in vim-plug to allow conditional plugin activation.
" https://github.com/junegunn/vim-plug/wiki/tips#conditional-activation
function! When(cond, ...)
  let opts = get(a:000, 0, {})
  return a:cond ? opts : extend(opts, { 'on': [], 'for': [] })
endfunction


" Define external plugins with vim-plug.
" plug#begin([PLUG_HOME]) supports providing the directory where to install
" Vim plugins. When not provided, it will use platform-specific Vim/Neovim
" independent path, which is preferred.
call plug#begin()

  " Simplify commenting out things.
  Plug 'tpope/vim-commentary'

  " Better work with text object surrounds like braces.
  Plug 'tpope/vim-surround'

  " Custom theme.
  Plug 'morhetz/gruvbox'

  " Status bar plugin.
  Plug 'vim-airline/vim-airline'

  " Fuzzy search (fzf) plugin.
  Plug 'junegunn/fzf'

  " Useful fzf-based Vim commands and mappings.
  Plug 'junegunn/fzf.vim'

  " Linting and autosuggestions.
  Plug 'dense-analysis/ale'

  " Emacs-like Org Mode for Neovim.
  Plug 'nvim-orgmode/orgmode', When(has('nvim'))

  " Include machine-specific packages.
  call SourceIfExists(".vimrc.local.packages")

call plug#end()


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Options
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Enable file type detection. Use the default filetype settings, also load
" indent files, to automatically do language-dependent indenting.
if has('autocmd')
  filetype plugin indent on
endif

" Enable sytnax support.
if has('syntax') && !exists('g:syntax_on')
  syntax enable
endif

" Encoding configuration.
set encoding=utf-8
set fileencoding=utf-8
set fileencodings=utf-8

" Avoid constant switching between keyboard layouts.
" https://stackoverflow.com/questions/3776728/how-to-avoid-constant-switching-to-and-from-english-keyboard-layout-to-type-vim
set keymap=russian-jcuken
set iminsert=0
set imsearch=-1

" Mark that terminal connection is fast.
set ttyfast

" Allow backspacing over everything in insert mode.
set backspace=indent,eol,start

" Do incremental searching when it's possible to timeout.
if has('reltime')
  set incsearch
endif
set hlsearch

" During searching, take the case into the account when using capital letters.
set ignorecase
set smartcase

" Disable error bell sound.
set noerrorbells
set visualbell
set t_vb=
set belloff=all

" Add vertical line denoting 80 symbols border.
set colorcolumn=80

" Give some space around the cursor in both directions.
set scrolloff=999
set sidescrolloff=5

" Enable current line highlighting.
set cursorline

" Enable line numbers.
set number
set relativenumber

" Tabs and indenting.
set autoindent
set nosmartindent
set smarttab
set expandtab
set shiftwidth=2
set tabstop=2
set softtabstop=0

" Disable backups and swapfile, use persistent undo instead.
set nobackup
set nowritebackup
set noswapfile
if has('persistent_undo')
  set undofile

  " Use different undo cache folders because undo files are not compatible
  " between Vim and Neovim.
  " https://github.com/neovim/neovim/issues/17301#issuecomment-1030660425
  set undodir=~/.cache/vim/undo
  if has('nvim')
    set undodir=~/.cache/nvim/undo
  endif

  call mkdir(&undodir, "p", 0700)
endif

" Don't unload a buffer when no longer shown in a window.
set hidden

" Shorter update time than the 4000ms default, for async vim operations.
set updatetime=2000

" Disable --[NORMAL/INSERT/VISUAL]-- because vim-airline already displays it.
set noshowmode

" Always have status line visible.
set laststatus=2

" Better splits.
set splitbelow
set splitright

" Automatically read a file when it was modified outside of Vim.
set autoread

" Better display of non-printable characters.
set list
set listchars=tab:»\ ,space:•,extends:›,precedes:‹,nbsp:␣

" Enable True Color support if possible.
if (has("termguicolors"))
  set termguicolors
endif

" Background color brightness.
set background=dark

" Use regular clipboard register (* and +) for yank/paste/delete operations.
set clipboard=unnamed
if has('unnamedplus')
  set clipboard+=unnamedplus
endif

" Change the cursor in different modes.
" Normal - block, Insert - bar, Replace - underline.
let &t_SI = "\e[5 q"
let &t_SR = "\e[3 q"
let &t_EI = "\e[2 q"


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Key bindings
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Set leader key. Default is '\'.
let mapleader="\<Space>"

" Set local leader key.
let maplocalleader="\<Space>l"

" Comment/uncomment using tpope/commentary plugin.
noremap <silent> <Leader>/ :Commentary<CR>

" Ctrl-P behaviour like in VS Code.
" The displayed filelist depends on $FZF_DEFAULT_COMMAND environment variable
" defined in zsh configuration files.
nnoremap <silent> <Leader>p :Files<CR>

" Toggle Netrw explorer view to the left.
nnoremap <silent> <Leader>e :Lexplore<CR>

" Make Y behave like C and D (do operation from the cursor to the end of line).
nnoremap <silent> Y y$

" Save a buffer both in NORMAL in INSERT modes.
inoremap <silent> <C-s> <C-O>:update<CR>
nnoremap <silent> <C-s> :update<CR>

" Maintain Visual Mode after shifting > and <.
xnoremap <silent> < <gv
xnoremap <silent> > >gv

" Move visual blocks down and up.
xnoremap <silent> J :m '>+1<CR>gv=gv
xnoremap <silent> K :m '<-2<CR>gv=gv

" Clear the highlighting of ':set hlsearch'.
nnoremap <silent> <C-L> :nohlsearch<C-R>=has('diff')?'<Bar>diffupdate':''<CR><CR><C-L>

" Make help window to appear vertically.
" In Vim, help windows always split horizontally and there is no configuration
" options to make them split vertically.
augroup vimrc_help
  autocmd!
  autocmd BufEnter *.txt if &buftype == 'help' | wincmd L | endif
augroup END

" Remap default keyboard layout change mapping to more confortable.
" See ':h keymap'.
inoremap <silent> <C-\> <C-^>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Netrw
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Prevent banner in the top of the Netrw window from showing.
let g:netrw_banner=0

" Tree style view of directories.
let g:netrw_liststyle=3

" The width of the Netrw window.
let g:netrw_winsize=20


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Gruvbox
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Use medium contrast variant of the theme.
let g:gruvbox_contrast_dark = 'medium'

" Enforce italic usage on terminals.
let g:gruvbox_italic = 1

" Vim always reads .vimrc file first and after that starts to load plugins. We
" use autocmd VimEnter to make sure that all plugins are loaded completely and
" then use gruvbox. ++nested is used to allow automatic filetype detection.
autocmd VimEnter * ++nested colorscheme gruvbox


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Airline
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Automatically populate the g:airline_symbols dictionary with the powerline
" symbols.
let g:airline_powerline_fonts = 1

" Automatically displays all buffers when there's only one tab open.
let g:airline#extensions#tabline#enabled = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" ALE
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
let g:ale_fixers = {
\  '*': ['trim_whitespace'],
\}

let g:ale_fix_on_save = 1


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Local config
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Include machine-specific vim configuration.
call SourceIfExists(".vimrc.local")

