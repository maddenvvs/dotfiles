// Place your key bindings in this file to override the defaults
[
    // Make ctrl+ยง to work on MacOS.
    {
        "key": "ctrl+[IntlBackslash]",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminal.active"
    },
    // Make ctrl+space to show IntelliSense in the editor window.
    {
        "key": "ctrl+space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly && !suggestWidgetVisible"
    },
    // Action bar hotkeys instead of the default ones.
    {
        "key": "cmd+k e",
        "command": "workbench.view.explorer",
        "when": "!explorerViewletVisible",
    },
    {
        "key": "cmd+k e",
        "command": "workbench.action.closeSidebar",
        "when": "explorerViewletVisible",
    },
    {
        "key": "cmd+k g",
        "command": "workbench.view.scm",
        "when": "activeViewlet != 'workbench.view.scm'",
    },
    {
        "key": "cmd+k g",
        "command": "workbench.action.closeSidebar",
        "when": "activeViewlet == 'workbench.view.scm'",
    },
    {
        "key": "cmd+k x",
        "command": "workbench.view.extensions",
        "when": "activeViewlet != 'workbench.view.extensions'"
    },
    {
        "key": "cmd+k x",
        "command": "workbench.action.closeSidebar",
        "when": "activeViewlet == 'workbench.view.extensions'"
    },
    {
        "key": "cmd+k b",
        "command": "workbench.action.toggleSidebarVisibility",
    },
    // File explorer.
    {
        "key": "cmd+r",
        "command": "workbench.files.action.refreshFilesExplorer",
        "when": "explorerViewletVisible && filesExplorerFocus && !inputFocus"
    },
    // Multi-curson.
    {
        "key": "cmd+k cmd+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus && editorHasMultipleSelections",
    },
    {
        "key": "cmd+shift+d",
        "command": "editor.action.moveSelectionToPreviousFindMatch",
        "when": "editorFocus && editorHasMultipleSelections",
    },
    // Editor panels.
    {
        "key": "ctrl+w \\",
        "command": "workbench.action.splitEditor",
        "when": "editorFocus",
    },
    {
        "key": "ctrl+w c",
        "command": "workbench.action.joinAllGroups",
        "when": "editorFocus",
    },
    {
        "key": "ctrl+w h",
        "command": "workbench.action.navigateLeft",
        "when": "editorFocus",
    },
    {
        "key": "ctrl+w l",
        "command": "workbench.action.navigateRight",
        "when": "editorFocus",
    },
    {
        "key": "ctrl+w =",
        "command": "workbench.action.increaseViewSize",
        "when": "editorFocus",
    },
    {
        "key": "ctrl+w -",
        "command": "workbench.action.decreaseViewSize",
        "when": "editorFocus",
    },
    // Terminal panels.
    {
        "key": "ctrl+w \\",
        "command": "workbench.action.terminal.split",
        "when": "terminalFocus",
    },
    {
        "key": "ctrl+w c",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus",
    },
    {
        "key": "ctrl+w h",
        "command": "workbench.action.terminal.focusPreviousPane",
        "when": "terminalFocus",
    },
    {
        "key": "ctrl+w l",
        "command": "workbench.action.terminal.focusNextPane",
        "when": "terminalFocus",
    },
    {
        "key": "ctrl+w ,",
        "command": "workbench.action.terminal.resizePaneLeft",
        "when": "terminalFocus",
    },
    {
        "key": "ctrl+w .",
        "command": "workbench.action.terminal.resizePaneRight",
        "when": "terminalFocus",
    },
    // Color schemes.
    {
        "key": "cmd+k t",
        "command": "workbench.action.toggleLightDarkThemes",
    },
    // amVim.
    {
        "key": "ctrl+d",
        "command": "editorScroll",
        "args": {
            "to": "down",
            "by": "halfPage",
            "revealCursor": true,
            "value": 1
        },
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    {
        "key": "ctrl+u",
        "command": "editorScroll",
        "args": {
            "to": "up",
            "by": "halfPage",
            "revealCursor": true,
            "value": 1
        },
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    // Redefine "o" and "O" commands in amVim.
    // The problem with the original implementaion is that it incorrectly
    // positions the cursor after switching to INSERT mode.
    {
        "key": "o",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.insertLineAfter",
                {
                    "command": "type",
                    "args": {
                        "text": "A",
                    },
                },
            ]
        },
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    {
        "key": "shift+o",
        "command": "runCommands",
        "args": {
            "commands": [
                "editor.action.insertLineBefore",
                {
                    "command": "type",
                    "args": {
                        "text": "A",
                    },
                },
            ]
        },
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    {
        "key": "shift+l",
        "command": "workbench.action.nextEditorInGroup",
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    {
        "key": "shift+h",
        "command": "workbench.action.previousEditorInGroup",
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput"
    },
    {
        "key": "ctrl+s",
        "command": "workbench.action.files.save",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+o",
        "command": "workbench.action.navigateBack",
        "when": "canNavigateBack && amVim.mode == 'NORMAL' && !amVim.waitingForInput",
    },
    {
        "key": "ctrl+i",
        "command": "workbench.action.navigateForward",
        "when": "canNavigateForward && amVim.mode == 'NORMAL' && !amVim.waitingForInput",
    },
    {
        "key": "cmd+k p",
        "command": "editor.action.marker.next",
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput",
    },
    {
        "key": "cmd+k shift+p",
        "command": "editor.action.marker.prev",
        "when": "editorTextFocus && amVim.mode == 'NORMAL' && !amVim.waitingForInput",
    },
    // Workspaces.
    {
        "key": "cmd+k r",
        "command": "workbench.action.openRecent",
    },
    // IntelliSense.
    {
        "key": "cmd+r",
        "command": "workbench.action.gotoSymbol",
    },
    {
        "key": "cmd+shift+r",
        "command": "workbench.action.showAllSymbols",
    },
    {
        "key": "cmd+k i",
        "command": "editor.action.showHover",
        "when": "editorTextFocus",
        "args": {
            "focus": "autoFocusImmediately",
        }
    },
    {
        "key": "j",
        "command": "editor.action.scrollDownHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "k",
        "command": "editor.action.scrollUpHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "l",
        "command": "editor.action.scrollRightHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "h",
        "command": "editor.action.scrollLeftHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "ctrl+d",
        "command": "editor.action.pageDownHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "ctrl+u",
        "command": "editor.action.pageUpHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "g",
        "command": "editor.action.goToTopHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "shift+g",
        "command": "editor.action.goToBottomHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "q",
        "command": "editor.action.hideHover",
        "when": "editorHoverFocused",
    },
    {
        "key": "cmd+g d",
        "command": "editor.action.revealDefinition",
        "when": "editorHasDefinitionProvider && editorTextFocus",
    },
]
