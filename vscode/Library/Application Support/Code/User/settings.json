{
  "diffEditor.ignoreTrimWhitespace": false,
  "editor.accessibilitySupport": "off",
  "editor.copyWithSyntaxHighlighting": false,
  "editor.cursorSurroundingLines": 9999,
  "editor.emptySelectionClipboard": false,
  "editor.formatOnSave": true,
  "editor.guides.bracketPairs": "active",
  "editor.lineNumbers": "relative",
  "editor.renderWhitespace": "all",
  "editor.trimAutoWhitespace": false,
  "extensions.autoUpdate": false,
  "extensions.ignoreRecommendations": true,
  "files.autoSave": "onFocusChange",
  "files.insertFinalNewline": true,
  "files.trimFinalNewlines": true,
  "files.trimTrailingWhitespace": true,
  "telemetry.feedback.enabled": false,
  "telemetry.telemetryLevel": "off",
  "update.mode": "default",
  "window.nativeFullScreen": false,
  "window.newWindowDimensions": "inherit",
  "window.zoomLevel": 1.5,
  "workbench.editor.enablePreview": false,
  "workbench.enableExperiments": false,
  "workbench.settings.enableNaturalLanguageSearch": false,
  /*
    Hide the things.
  */
  "editor.guides.indentation": false,
  "editor.minimap.enabled": false,
  "window.customTitleBarVisibility": "never",
  "window.titleBarStyle": "native",
  "workbench.activityBar.location": "hidden",
  "workbench.editor.showTabs": "multiple",
  "workbench.sideBar.location": "right",
  /*
    Silence the noise.
  */
  "breadcrumbs.enabled": false,
  /*
    Typography.
  */
  "editor.fontFamily": "JetBrainsMonoNL Nerd Font Mono, Menlo, Monaco, 'Courier New', monospace",
  "editor.fontSize": 16,
  "editor.lineHeight": 0,
  "editor.suggestFontSize": 0,
  "editor.suggestLineHeight": 0,
  "terminal.integrated.fontSize": 16,
  /*
    Intergrated terminal.
  */
  "terminal.external.osxExec": "Alacritty.app",
  "terminal.integrated.hideOnStartup": "always",
  "terminal.integrated.persistentSessionReviveProcess": "never",
  /*
    Disable all AI.
  */
  "chat.agent.enabled": false,
  "chat.checkpoints.enabled": false,
  "chat.commandCenter.enabled": false,
  "chat.detectParticipant.enabled": false,
  "chat.extensionTools.enabled": false,
  "chat.edits2.enabled": false,
  "editor.aiStats.enabled": false,
  "inlineChat.accessibleDiffView": "off",
  "inlineChat.lineNaturalLanguageHint": false,
  "inlineChat.lineEmptyHint": false,
  "terminal.integrated.initialHint": false,
  "workbench.editor.empty.hint": "hidden",
  /*
    Python-specific configuration.
  */
  "python.analysis.typeCheckingMode": "strict",
  "[python]": {
    "editor.defaultFormatter": "charliermarsh.ruff",
    "editor.codeActionsOnSave": {
      "source.fixAll": "explicit",
      "source.organizeImports": "explicit",
    },
  },
  /*
    Rust-specific configuration.
  */
  "rust-analyzer.check.command": "clippy",
  /*
    indent-rainbow extension.
  */
  // Defining custom colors instead of default "Rainbow" for dark backgrounds.
  "indentRainbow.colors": [
    "rgba(255,255,64,0.3)",
    "rgba(127,255,127,0.3)",
    "rgba(255,127,255,0.3)",
    "rgba(79,236,236,0.3)"
  ],
  // The indent color if the number of spaces is not a multiple of "tabSize".
  "indentRainbow.errorColor": "rgba(128,32,32,0.6)",
  // The indent color when there is a mix between spaces and tabs.
  // To be disabled this coloring set this to an empty string.
  "indentRainbow.tabmixColor": "rgba(128,32,96,0.6)",
  // Using the light mode
  "indentRainbow.indicatorStyle": "light",
  // we use a simple 1 pixel wide line
  "indentRainbow.lightIndicatorStyleLineWidth": 1,
  /*
    Material Icon extension.
  */
  "workbench.iconTheme": "material-icon-theme",
  "material-icon-theme.activeIconPack": "none",
  "material-icon-theme.folders.theme": "classic",
  /*
    Neovim.
  */
  "extensions.experimental.affinity": {
    "asvetliakov.vscode-neovim": 1
  },
  /*
    Color schemes.
  */
  "workbench.preferredLightColorTheme": "Solarized Light",
  "workbench.preferredDarkColorTheme": "Monokai",
  "window.autoDetectColorScheme": false,
  "workbench.colorTheme": "Monokai",
  /*
    Git.
  */
  "git.blame.editorDecoration.enabled": true,
  "git.blame.editorDecoration.template": "${subject}, ${authorName} (${authorDateAgo})",
  "git.blame.statusBarItem.enabled": true,
  "git.blame.statusBarItem.template": "${authorName} (${authorDateAgo})",
}
